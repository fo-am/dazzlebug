;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gp

(define num-eggs-total 20)
(define num-eggs-from-population 20)
(define num-best-eggs 16)
(define selection-pop-size 256)
(define photo-time-allowed 600)

(define (make-individual id fitness ancestral-fitness generation parent drawable egg pos phase)
  (list id fitness ancestral-fitness generation parent drawable egg pos phase))

(define (individual-id i) (list-ref i 0))
(define (individual-fitness i) (list-ref i 1))
(define (individual-modify-fitness i v) (list-replace i 1 v))
(define (individual-ancestral-fitness i) (list-ref i 2))
(define (individual-generation i) (list-ref i 3))
(define (individual-parent i) (list-ref i 4))
(define (individual-drawable i) (list-ref i 5))
(define (individual-egg i) (list-ref i 6))
(define (individual-pos i) (list-ref i 7))
(define (individual-phase i) (list-ref i 8))

(define world-w 5000)
(define world-h 500)

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2)))))
        (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2)))))))

(define (generate-image-pos2)
  (list (+ 100 (random (- screen-width 200)))
        (+ 100 (random (- screen-height 200)))))

(define (make-pos game)
  (if (eq? game "flicker")
      (generate-image-pos2)
      (list (random world-w) (random world-h))))

(define (sqr x) (* x x))

(define (calc-mutation-rate)
  (* (sqr (* (rndf) 3.16227766)) 0.01)) ;; sqrt of 10 = 0-10%

(define (make-population game samples mutate phase)
  (if (not (eq? phase "init"))
      (map
       (lambda (sample)
         (let ((program (if (zero? mutate)
                            (list-ref sample 0)
                            (egg-mutate (list-ref sample 0)
                                        (calc-mutation-rate))))
               (ancestral-fitness (list-ref sample 1))
               (generation (list-ref sample 2))
               (id (list-ref sample 3)))
           (make-individual
            id
            0
            ancestral-fitness
            (+ generation 1)
            id
            (egg-drawable program #t)
            program
            (make-pos game)
            phase)))
       (shuffle samples))

      (build-list
       num-eggs-total
       (lambda (i)
         ;; fixme
         (msg "making random egg")
         (let ((program (make-random-egg egg-complexity)))
           (make-individual
            0 0 0 0 0 (egg-drawable program #t)
            program
            (make-pos game)
            phase))))))

(define (make-egg-grid game samples x-off)
  (index-map
   (lambda (i sample)
     (let ((program (car sample))
           (fitness (cadr sample))
           (id (list-ref sample 2)))
       (let ((x (modulo i 4)) (y (Math.floor (/ i 4))))
         (let ((xx (+ 80 (* x 90)))
               (yy (+ 150 (* y 120))))
           (list
            (make-individual
             id
             0 0 0 0
             (egg-drawable program #f)
             program
             (list (+ x-off xx) yy))
            (string-append
             (time-to-seconds fitness)
             " : " (list-ref sample 3)
             " : " (list-ref sample 4)))))))
   samples))

(define (make-best-population game samplesa samplesb samplesc)
  (append
   (make-egg-grid game samplesa 400)))

(define (draw-genome-node ctx program centrex centrey posx posy d apa start end n dist)
  (let ((childstart (+ start (* apa n))))
    (let ((childend (+ childstart apa)))
      (let ((tox (+ centrex (* (sin (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist)))
            (toy (+ centrey (* (cos (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist))))
        (set! ctx.strokeStyle "#000")
        (set! ctx.lineWidth 2)
        (ctx.beginPath)
        (ctx.moveTo posx posy)
        (ctx.lineTo tox toy)
        (ctx.stroke)
        (inner-draw-genome ctx program centrex centrey (+ d 1) childstart childend dist)))))

(define (lerp a b t) (+ (* b t) (* a (- 1 t))))

(define (inner-draw-genome ctx program centrex centrey d start end dist)
  (let ((sc (lerp 0.5 0.3 (/ d 6))))
    (let ((posx (+ centrex (* (sin (+ start (* (/ (- end start) 2.0)))) d dist)))
          (posy (+ centrey (* (cos (+ start (* (/ (- end start) 2.0)))) d dist)))
          (size (* sc 128)))
      (set! ctx.strokeStyle "#000")
      (set! ctx.lineWidth 2)
      (ctx.strokeRect (- posx (/ size 2)) (- posy (/ size 2)) size size)
      (if (eq? (program-type program) "terminal")
          (let ((tcanvas (document.createElement "canvas")))
            (set! tcanvas.width size)
            (set! tcanvas.height size)
            (let ((tctx (tcanvas.getContext "2d")))
              (tctx.scale sc sc)
              (draw-terminal tctx program)
              (ctx.drawImage tcanvas (- posx (/ size 2)) (- posy (/ size 2)))))
          (let ((apa (/ (- end start) 2)))

            (draw-genome-node ctx (operator-operand-a program)
                              centrex centrey posx posy d apa start end 0 dist)
            (draw-genome-node ctx (operator-operand-b program)
                              centrex centrey posx posy d apa start end 1 dist)

            (ctx.save)
            (ctx.translate (- posx (/ size 2))
                           (- posy (/ size 2)))
            (ctx.scale sc sc)
            (draw-op ctx program)
            (set! ctx.fillStyle "#000")
            (set! ctx.font "normal 15pt 'Press Start 2P'")
            (fill-centre-text ctx (operator-type program) 64
                              (if (eq? d 0) 200 180))
            (ctx.restore))))))

(define (render-egg-genome ctx egg centrex centrey)
  (let ((canvas (document.createElement "canvas")))
    (set! canvas.width screen-width)
    (set! canvas.height screen-height)
    (let ((ctx (canvas.getContext "2d")))
      (ctx.beginPath)
      (ctx.arc centrex centrey 500 0 (* 2 Math.PI) #f)
      (set! ctx.fillStyle "#278")
      (ctx.fill)
      (inner-draw-genome ctx egg centrex centrey 0 0 (* 2 3.141) 65)
      (set! ctx.fillStyle "#000"))
    canvas))


(define (render-egg-family-tree ancestors)
  (map
   (lambda (anc)
     (egg-drawable (JSON.parse (list-ref (car anc) 1)) #f))
   ancestors))

(define (draw-egg-family-tree ctx ancestors eggs)

  (let ((w (/ (- screen-width 400) (length ancestors))))
    (set! ctx.fillStyle "#000")
    (set! ctx.font "normal 15pt 'Press Start 2P'")

    (index-for-each
     (lambda (i anc)
       (let ((x (+ (* i w) 100)))

         (ctx.drawImage (list-ref eggs i) x 250)

         (fill-centre-text ctx (+ "" (car (car anc)) " " (list-ref (car anc) 2)) x 200)
         (fill-centre-text ctx (+ "" (time-to-seconds (list-ref (car anc) 3))) x 500)

         ;;(index-for-each
         ;; (lambda (i child)
         ;;   (fill-centre-text ctx (+ "" (car child) " " (list-ref child 2)) x (+ 400 (* i 20))))
         ;; (cadr anc))
         ))
     ancestors))

  (set! ctx.fillStyle "#000"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (egglab-data time eggs offset land images username replicate player-time)
  (list time eggs offset land images username replicate player-time tooltip player-id))

(define (egglab-data-init land)
  (list 0 () (list 0 0) land () "???" 0 0 "" 0))

(define (egglab-data-init-land d land)
  (egglab-data-modify-images
   (egglab-data-modify-land d land)) ())

(define (egglab-data-start-game d player-id time eggs offset replicate)
  (list time eggs offset
        (list-ref d 3)
        (list-ref d 4)
        (list-ref d 5)
        replicate 0
        (list-ref d 8)
        player-id))

(define (egglab-data-time d) (list-ref d 0))
(define (egglab-data-modify-time d v) (list-replace d 0 v))
(define (egglab-data-eggs d) (list-ref d 1))
(define (egglab-data-modify-eggs d v) (list-replace d 1 v))
(define (egglab-data-offset d) (list-ref d 2))
(define (egglab-data-modify-offset d v) (list-replace d 2 v))
(define (egglab-data-land d) (list-ref d 3))
(define (egglab-data-modify-land d v) (list-replace d 3 v))
(define (egglab-data-images d) (list-ref d 4))
(define (egglab-data-modify-images d v) (list-replace d 4 v))
(define (egglab-data-username d) (list-ref d 5))
(define (egglab-data-modify-username d v) (list-replace d 5 v))
(define (egglab-data-replicate d) (list-ref d 6))
(define (egglab-data-modify-replicate d v) (list-replace d 6 v))
(define (egglab-data-player-time d) (list-ref d 7))
(define (egglab-data-modify-player-time d v) (list-replace d 7 v))
(define (egglab-data-tooltip d) (list-ref d 8))
(define (egglab-data-modify-tooltip d v) (list-replace d 8 v))
(define (egglab-data-player-id d) (list-ref d 9))
(define (egglab-data-modify-player-id d v) (list-replace d 9 v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (bg-full-path fn)
  (string-append "/bg/" fn))

(define (async-load-images c path l)
  (for-each
   (lambda (i)
     (let ((fullpath (bg-full-path i)))
       (load-image-mutate
        (lambda (c)
          (game-modify-data
           (lambda (d)
             (egglab-data-modify-images
              d (append (egglab-data-images d) (list fullpath))))
           c))
        fullpath)))
   (shuffle l)))

;; just to get them in the cache
(define (async-load-images-null c path l)
  (for-each
   (lambda (i)
     (let ((fullpath (bg-full-path i)))
       (load-image-mutate
        (lambda (c)
          (msg (+ "loaded " fullpath))
          c)
        fullpath)))
   (shuffle l)))

(define (nightjar-intro c)
  ;; kick off the loading here
  (async-load-images-null c "CF" bg_images)

  (game-modify-render
   (lambda (ctx)
       (set! ctx.fillStyle "#000")
       (set! ctx.font "normal 40pt 'Press Start 2P'")
       (wrap-text ctx "See me, click me!" 0 160 1000 60)
       (set! ctx.font "normal 30pt 'Press Start 2P'")
       (wrap-text ctx "(extremely beta)" 0 220 1000 60)
       (set! ctx.font "normal 15pt 'Press Start 2P'")
       (wrap-text ctx "Catch the rectangles for citizen science camouflage evolution glory. It's fun for the whole family." 0 260 1000 25)
       (set! ctx.font "normal 15pt 'Press Start 2P'")
       )
   (game-modify-buttons
    (list
     (image-button
      "Sound" 1020 700 "jumpy"
      (if (zero? (game-mute c))
          (find-image "mute-off.png")
          (find-image "mute-on.png"))
      (lambda (c)
        (game-modify-buttons
         (cons
          (button-modify-drawable
           (car (game-buttons c))
           (if (zero? (game-mute c))
               (find-image "mute-on.png")
               (find-image "mute-off.png")))
          (cdr (game-buttons c)))
         (game-flip-mute c))))

     (egglab-button
      "Play" 600 400 (find-image "bigbutton-1.png")
      "Try and find new eggs. Their camouflage changes as people play."
      (lambda (c)
        (async-load-images c "CF" bg_images)
        (nightjar-research
         "flicker"
         (game-modify-data
          (lambda (d)
            (egglab-data-init "CF"))
          c))))

     (egglab-button
      "More info" 600 540 (find-image "bigbutton-2.png")
      "Try and find new eggs. Their camouflage changes as people play."
      (lambda (c)
        (nightjar-env c)))


    (image-button
     "Browser check" 600 700 "jumpy" (find-image "button.png")
     (lambda (c)
       c))



     )
    c)))

;    (image-button
;     "More..." 870 700 "jumpy" (find-image "button.png")
;     (lambda (c)
;       (nightjar-env c)))




(define (nightjar-browser-test c eggs)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (ctx.fillText "Browser check" 20 50)
     (ctx.drawImage (find-image "browser-check.png") 400 200)
     (set! ctx.fillStyle "#000")
     (ctx.fillRect 400 380 530 160)
     (index-for-each
      (lambda (i egg)
        (ctx.drawImage egg (+ 400 (* i 100)) 400))
      eggs)

     (robo-nightjar-says-bottom
      ctx 18
      (string-append "The top and bottom eggs should look the same. If not, please use a different browser e.g. Chrome.")))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c)
        (nightjar-menu c)))

     )
    c)))

;;(robo-nightjar-says-bottom ctx 20 "Choose which species' nest sites you want to try - I have different eggs for each.")

(define (nightjar-about c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "About" 0 50 1000 1000)
     (set! ctx.font "normal 15pt 'Press Start 2P'")
     (wrap-text ctx "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." 0 100 1000 40))

   (game-modify-buttons
    (list
    (image-button
     "Back" 1150 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-choose-location c))))
    c)))


(define (nightjar-env c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text
       ctx (string-append "Pattern information") 0 100 1000 60)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (set! ctx.fillStyle "#000")
      )

    (game-modify-buttons
     (list

      (egglab-button
       "High Scores" 600 200 (find-image "bigbutton-1.png")
       "See if you are on the high scores list."
       (lambda (c)
         (server-call-mutate
          "hiscores"
          (list
           (list "count" 20))
          (lambda (c data)
            (nightjar-hiscores (JSON.parse data) c)))
         c))

      (egglab-button
       "Most successful patterns" 600 400 (find-image "bigbutton-2.png")
       "See my most successful eggs for each species."
       (lambda (c)
         (let ((replicate (random num-replicates)))
           (server-call-mutate
            "top-eggs"
            (list
             (list "replicate" replicate)
             (list "count" num-best-eggs))
            (lambda (c data)
              (let ((data (JSON.parse data)))
                (nightjar-best
                 (game-modify-data
                  (lambda (d)
                    (egglab-data-start-game
                     d (egglab-data-player-id d) 0
                     (make-best-population
                      c (map
                         (lambda (d)
                           ;; individually parse the egg's code
                           (cons (JSON.parse (car d)) (cdr d)))
                         (list-ref data 0))
                      (map
                       (lambda (d)
                         ;; individually parse the egg's code
                         (cons (JSON.parse (car d)) (cdr d)))
                       (list-ref data 1))
                      (map
                       (lambda (d)
                         ;; individually parse the egg's code
                         (cons (JSON.parse (car d)) (cdr d)))
                       (list-ref data 2)))
                     (list 0 0) 0))
                  c) replicate)))))
         (nightjar-generating-best-eggs c)))

      (egglab-button
       "Difficulty graph" 600 600 (find-image "bigbutton-1.png")
       "This shows how my eggs are becoming more difficult to spot."
        (lambda (c)
          (server-call-mutate
           "get-stats"
           (list)
           (lambda (c data)
             (nightjar-fit-graph (JSON.parse data) c)))
          c))


      (image-button
       "Play again!" 1100 720 "jumpy" (find-image "button.png")
       (lambda (c)
         (async-load-images c "CF" bg_images)
         (nightjar-research
          "flicker"
          (game-modify-data
           (lambda (d)
             (egglab-data-init "CF"))
           c)))))
     c))))


(define (nightjar-generating-best-eggs c)
  (game-modify-update
   (lambda (t c)
     c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-says ctx 20 "Please wait while I calculate the best patterns from one of my populations for you..."))
    (game-modify-buttons (list) c))))


(define (nightjar-hiscores table c)
  (game-modify-update
   (lambda (t c ) c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-bot-left ctx 17 "These are my quickest clicking players. The number in brackets is the generation of pattern.")
      (set! ctx.fillStyle "#000")
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx (string-append "High Scores") 120 100 1000 70)
      (set! ctx.font "normal 20pt 'Press Start 2P'")

      (index-for-each
       (lambda (i e)
         (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)) " (" (list-ref e 2) ")")))
           (set! ctx.fillStyle "#000")
           (if (eq? i 0)
               (text-flashy-render ctx txt 650 (+ 200 (* 30 i)) (game-time c))
               (ctx.fillText txt 650 (+ 200 (* 30 i))))))
       (list-ref table 0)))


    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-env c))))
     c))))

(define (min-max l)
  (foldl
   (lambda (i r)
     (list
      (if (< i (car r)) i (car r))
      (if (> i (cadr r)) i (cadr r))))
   (list 9999999 0)
   l))

(define (meta-min-max-inner ll r)
  (foldl
   (lambda (i r)
     (list
      (if (< i (car r)) i (car r))
      (if (> i (cadr r)) i (cadr r))))
   r ll))

(define (meta-min-max l)
  (foldl
   (lambda (ll r)
     (meta-min-max-inner ll r))
   (list 9999999 0)
   l))

(define (longest l)
  (foldl
   (lambda (i r)
     (if (> (length i) r) (length i) r))
   0
   l))

(define (draw-graph ctx col table x y w h x-per-sample mm)
;;  (msg table)
  (set! ctx.strokeStyle "#000")
  (ctx.strokeRect x y w h)
  (set! ctx.strokeStyle col)
  (when (not (null? table))
        (ctx.beginPath)
        (ctx.moveTo x (+ y h))
        (set! ctx.lineWidth 3)
        (index-for-each
         (lambda (i s)
           (ctx.lineTo (+ x (* i x-per-sample))
                       (+ h (- y (* h (/ (- s (car mm)) (- (cadr mm) (car mm))))))))
         table)
        (ctx.stroke)
        (set! ctx.lineWidth 1)
        ))

(define (draw-fitness-graph ctx table x y w h)
  (let ((table (list (map (lambda (i) (cadr i)) (list-ref table 0))
                     (map (lambda (i) (cadr i)) (list-ref table 1))
                     (map (lambda (i) (cadr i)) (list-ref table 2)))))
    (let ((x-per-sample (/ w (- (longest table) 1)))
          (mm (meta-min-max table)))
      (draw-graph ctx "#f77" (list-ref table 0) x y w h x-per-sample mm)
      (draw-graph ctx "#7f7" (list-ref table 1) x y w h x-per-sample mm)
      (draw-graph ctx "#77f" (list-ref table 2) x y w h x-per-sample mm)

  (ctx.save)
  (ctx.translate (+ x 10) (+ y -170 (/ h 2)))
  (ctx.rotate (/ Math.PI 2))
  (ctx.fillText "Average time in seconds" 0 0)
  (ctx.restore)

  (set! ctx.fillStyle "#f77")
  (ctx.fillText "Mozambique nightjar" (+ x 50) (+ y 40))
  (set! ctx.fillStyle "#7f7")
  (ctx.fillText "Pennant-winged nightjar" (+ x 50) (+ y 80))
  (set! ctx.fillStyle "#77f")
  (ctx.fillText "Fiery-necked nightjar" (+ x 50) (+ y 120))

  (set! ctx.fillStyle "#000")
  (ctx.fillText "Generations" (+ x h -100) (+ 25 y (/ w 2)))
  (ctx.fillText "0" x (+ 20 y h))
  (ctx.fillText (longest table) (+ x w) (+ y h 20))

  (ctx.fillText (time-to-seconds (cadr mm)) x (- y 5))
  (ctx.fillText (time-to-seconds (car mm)) x (+ y h -5))

  )))

(define (nightjar-fit-graph table c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx (string-append "Egg difficulty graph") 0 100 1000 70)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (draw-fitness-graph ctx table 50 250 1000 500))

    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-env c))))
     c))))


(define (nightjar-research game-type c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Are you happy for us to use your timing information?" 0 100 1000 60)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (wrap-text ctx "Try and click on the boxes as fast as you can. Small differences help to make better camouflage patterns." 0 250 600 30)

      )

    (game-modify-buttons
     (list

      (image-button
       "" 835 455 "rotate" (find-image "yes.png")
       (lambda (c)
         (let ((replicate (random num-replicates)))
           (server-call-mutate
            "sample"
            (list
             (list "player-id" (egglab-data-player-id (game-data c)))
             (list "population" (egglab-data-land (game-data c)))
             (list "replicate" replicate)
             (list "count" num-eggs-from-population))
            (lambda (c data)
              (let ((ret (JSON.parse data)))
                (let ((player-id (cadr (car ret)))
                      (samples (cadr ret)))
                  (let ((pop (make-population
                              "flicker"
                              (if (eq? null samples)
                                  ()
                                  (map
                                   (lambda (d)
                                     ;; individually parse the egg's code
                                     (cons (JSON.parse (car d)) (cdr d)))
                                   (cadr samples)))
                              (if (eq? (car samples) "fill") 1 0)
                              (car samples))))
                    (nightjar-flicker-game
                     (game-modify-data
                      (lambda (d)
                        (let ((time-now (- (js "new Date()") load-time)))
                          (egglab-data-start-game
                           d player-id time-now pop (list 0 0) replicate)))
                      c))))))))
         (nightjar-generating-eggs c)))

     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c) (nightjar-choose-location c)))
     )

     c))))

(define (nightjar-generating-eggs c)
  (game-modify-update
   (lambda (t c)
     c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Generating camouflage... GET READY TO PLAY!" 0 250 600 60))
    (game-modify-buttons (list) c))))

(define (nightjar-thanks c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Thanks for playing! With your help the eggs will keep getting harder to spot — keep playing and see how they evolve further..." 0 200 1000 50)

      (text-flashy-render ctx (string-append "Your average time was: "
                                    (time-to-seconds (egglab-data-player-time (game-data c)))
                                    " seconds.")
                          225 400 (game-time c))

      (set! ctx.font "normal 15pt 'Press Start 2P'"))

    (game-modify-postrender
     (lambda (ctx) 0)
     (game-modify-buttons
      (list

       (image-button "" 200 600 "none" (find-image "twitter.png")
                     (lambda (c)
                       (set! window.location "https://twitter.com/ProjectNightjar") c))

       (image-button "" 1000 600 "none" (find-image "facebook.png")
                     (lambda (c)
                       (set! window.location "https://www.facebook.com/SensoryEcology") c))

       (image-button
        "Continue" (/ screen-width 2) 600 "jumpy" (find-image "button.png")
        (lambda (c)
          (if (eq? (egglab-data-username (game-data c)) "???")
              (nightjar-enter-name c)
              (begin
                (server-call
                 "add-score"
                 (list
                  (list "player-id" (egglab-data-player-id (game-data c)))
                  (list "name" (egglab-data-username (game-data c)))
                  (list "score" (egglab-data-player-time (game-data c)))
                  (list "population" (egglab-data-land (game-data c)))
                  (list "replicate" (egglab-data-replicate (game-data c)))))
                (nightjar-env c))))))
      c)))))

(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (game-modify-data
   (lambda (d)
     (egglab-data-modify-username d (type-into (egglab-data-username d) ch)))
   c))

(define (type-delete c)
  (game-modify-data
   (lambda (d)
     (egglab-data-modify-username d (type-into-delete (egglab-data-username d))))
   c))

(define (nightjar-enter-name c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "normal 50pt 'Press Start 2P'")
      (wrap-text ctx (egglab-data-username (game-data c)) 0 280 1000 70)
      (set! ctx.font "normal 30pt 'Press Start 2P'"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 105)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (find-image "button.png")
                         (lambda (c) (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (image-button "Delete" 850 700 "jumpy" (find-image "button.png")
                     (lambda (c) (type-delete c)))

       (image-button "Done" 1100 700 "jumpy" (find-image "button.png")
                     (lambda (c)
                       (server-call
                        "add-score"
                        (list
                         (list "player-id" (egglab-data-player-id (game-data c)))
                         (list "name" (egglab-data-username (game-data c)))
                         (list "score" (egglab-data-player-time (game-data c)))
                         (list "population" (egglab-data-land (game-data c)))
                         (list "replicate" (egglab-data-replicate (game-data c)))))
                       (server-call
                        "player"
                        (list
                         (list "player-id" (egglab-data-player-id (game-data c)))
                         (list "name" (egglab-data-username (game-data c)))
                         (list "played-before" "#f")
                         (list "age-range" 2)))
                       (nightjar-env c))))
      )
     c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (find-egg drawable pop)
  (let ((r (filter
            (lambda (egg)
              (eq? drawable (individual-drawable egg)))
            pop)))    (if (null? r) #f (car r))))

(define (time-elapsed c)
  (- (game-time c) (egglab-data-time (game-data c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define speed 0.2)

(define (screen-pos c egg)
  (- screen-width
     (+ (car (individual-pos egg))
        (car (game-world-offset c)))))

(define (fitness c egg)
  (/ (screen-pos c egg) speed))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (reset-images c)
  (game-modify-data
   (lambda (d)
     (let ((land (egglab-data-land (game-data c))))
       (egglab-data-modify-images
        d (map
           (lambda (i)
             (bg-full-path land i))
           (shuffle
            (cond
             ((eq? land "CF") bg_images)
             (else (msg "oops") bg_images)))))))
   c))

(define (egglab-add-time t d)
  (egglab-data-modify-player-time
   d (+ t (egglab-data-player-time d))))

(define (egglab-finish-time t d)
  (egglab-data-modify-player-time
   d (/ (+ t (egglab-data-player-time d)) num-eggs-total)))

(define (submit-egg egg c)
  (server-call
   "add"
   (list
    (list "phase" (individual-phase egg))
    (list "population" (egglab-data-land (game-data c)))
    (list "replicate" (egglab-data-replicate (game-data c)))
    (list "egg-id" (individual-id egg))
    (list "player-id" (egglab-data-player-id (game-data c)))
    (list "fitness" (time-elapsed c))
    (list "parent" (individual-parent egg))
    (list "image" (car (egglab-data-images (game-data c))))
    (list "x-pos" (car (individual-pos egg)))
    (list "y-pos" (cadr (individual-pos egg)))
    (list "genotype" (JSON.stringify (individual-egg egg))))))

(define (build-next-egg c)
  (if (eq? (length (egglab-data-eggs (game-data c))) 1)
      (game-modify-data
       (lambda (d)
         (egglab-finish-time (time-elapsed c) d))
       (reset-images (nightjar-thanks c)))
      (game-modify-buttons
       (list
        (flicker-build-egg
         (game-modify-data
          (lambda (d)
            (egglab-add-time
             (time-elapsed c)
             (egglab-data-modify-images
              (egglab-data-modify-offset
               (egglab-data-modify-eggs
                (egglab-data-modify-time
                 d
                 (game-time c))
                (cdr (egglab-data-eggs d)))
               (list 0 0))
              (cdr (egglab-data-images d)))))
          c)))
       c)))

(define (seconds-taken c)
  (/ (time-elapsed c) 1000))

(define (result-text t)
  (cond
   ((< t 1)
    (play-sound (string-append "great-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Super Reflex" "X-Ray vision!" "Perfect predator" "SO FAST"))))
   ((and (> t 1) (< t 2))
    (play-sound (string-append "good-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Nice work" "Not too shabby" "Good"))))
   (else
    (play-sound (string-append "ok-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Try harder" "Could do better" "Mouse problem?" "Looking the other way?"))
     ))))

(define (flicker-build-egg c)
  (let ((egg (car (egglab-data-eggs (game-data c)))))
    (let ((pos (individual-pos egg)))
      (animated-button
       "" (car pos) (cadr pos)
       (random-range -500 500)
       (random-range -500 500) #f
       (individual-drawable egg)
       (lambda (c)
         (submit-egg egg c)
         (let ((t (seconds-taken c)))
           (nightjar-flicker-result
            c t (result-text t)
            (list (random-range -200 200) (random-range 200 800))
            (list (- (rndf) 0.5) (- (rndf) 0.5))
            (+ (game-time c) 500))))))))

(define (nightjar-flicker-game c)
  (game-modify-update
   (lambda (t c)
     (cond
      ((< (seconds-taken c) photo-time-allowed)
       c)
      (else
       ;; don't submit ones not clicked on???
       (submit-egg (car (egglab-data-eggs (game-data c))) c)
       (play-sound (string-append "fail.wav"))
       (build-next-egg c))))
   (game-modify-render
    (lambda (ctx)
      (ctx.drawImage
       (find-image (car (egglab-data-images (game-data c))))
       (- 0 (car (egglab-data-offset (game-data c))))
       (- 0 (cadr (egglab-data-offset (game-data c)))))
      (set! ctx.font "normal 30pt 'Press Start 2P'"))
    (game-modify-postrender
     (lambda (ctx)
       (nightjar-draw-clock ctx (seconds-taken c) photo-time-allowed))
     (game-modify-buttons
      (list
       (flicker-build-egg c))
      c)))))

(define (nightjar-flicker-result c time text pos dir end-time)
  (game-modify-update
   (lambda (t c)
     (if (> t end-time)
         (build-next-egg (nightjar-flicker-game c))
         c))
   (game-modify-render
    (lambda (ctx)
      (ctx.drawImage (find-image (car (egglab-data-images (game-data c))))
                     (- 0 (car (egglab-data-offset (game-data c))))
                     (- 0 (cadr (egglab-data-offset (game-data c)))))
      (nightjar-draw-clock ctx time photo-time-allowed)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (set! ctx.font "normal 30pt 'Press Start 2P'"))
    (game-modify-postrender
     (lambda (ctx) 0)
     (game-modify-buttons
      (list) c)))))

;;      (let ((x (+ (car pos) (* (car dir) 0.1 (- end-time (game-time c)))))
;;            (y (+ (cadr pos) (* (cadr dir) 0.1 (- end-time (game-time c))))))
;;        (set! ctx.fillStyle "#000")
;;        (wrap-text ctx text x y)
;;        (if (< time 1)
;;            (let ((t (game-time c)))
;;              (set! ctx.fillStyle (rgb-to-hex (* 256 (sin (* t 0.005)))
;;                                              (* 256 (sin (* t 0.006)))
;;                                              (* 256 (sin (* t 0.008))))))
;;            (set! ctx.fillStyle "#fff"))
;;      (wrap-text ctx text (- x 5) (- y 5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (nightjar-best c replicate)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (robo-nightjar-says-bottom
       ctx 18
       (string-append "These are my best patterns so far "
                      (+ replicate 1) ". Click on a pattern to see it's ancestors."))
      (set! ctx.font "normal 10pt 'Press Start 2P'"))

    (game-modify-buttons
     (append
      (list

       (image-button
        "Back" 1150 720 "jumpy" (find-image "button.png")
        (lambda (c) (nightjar-env c))))

      (map
       (lambda (best-egg)
         (let ((egg (car best-egg))
               (fitness (cadr best-egg)))
           (let ((pos (individual-pos egg)))
             (image-button
              "" (car pos) (cadr pos) #f
              (individual-drawable egg)
              (lambda (c)
                (server-call-mutate
                 "family-tree"
                 (list (list "id" (individual-id egg))) ;; only works for the viz screens
                 (lambda (c data)
                   (let ((d (reverse (crop (JSON.parse data) 10))))
                     (nightjar-family-tree c replicate egg d
                                           (render-egg-family-tree d)))))
                c)))))
       (egglab-data-eggs (game-data c))))
     c))))

(define (nightjar-family-tree c replicate egg ancestors eggs)
  (game-modify-render
   (lambda (ctx)

     (set! ctx.font "normal 20pt 'Press Start 2P'")
     (ctx.fillText "Generations" 50 100)
     (ctx.fillText "Fitness (average time taken to find in seconds)" 50 380)

     (set! ctx.font "normal 30pt 'Press Start 2P'")

     (index-for-each
      (lambda (i anc)
        (let ((x (+ (* i 100) 150)))
          (fill-centre-text ctx (list-ref (car anc) 2) x 170)
          (fill-centre-text ctx (+ "" (time-to-seconds (list-ref (car anc) 3))) x 550)
          ))
      ancestors)

     (let ((table (map (lambda (anc) (time-to-seconds (list-ref (car anc) 3))) ancestors)))
       (draw-graph ctx "#ff7"
                   table
                   150 400 (* 100 (- (length ancestors) 1))
                   100 100 (min-max table)))

     (ctx.fillText "Pattern ancestors" 20 50)
     (robo-nightjar-says-bottom
      ctx 18
      (string-append "These are the decendants of this successful pattern. Click on one to see how it's constructed.")))
   (game-modify-buttons
    (cons
     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c)
        (nightjar-best c replicate)))

      (index-map
       (lambda (i egg)
         (let ((pos (+ 150 (* i 100))))
           (image-button
            "" pos 250 #f
            egg
            (lambda (c)
              (let ((genome (JSON.parse (list-ref (car (list-ref ancestors i)) 1))))
                (nightjar-egg-view
                 c replicate egg ancestors eggs
                 (render-egg-genome
                  ctx genome
                  (/ screen-width 2) (/ screen-height 2))
                 genome))))))
       eggs)
     )
    c)))

(define (nightjar-egg-view c replicate egg ancestors eggs image genome)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (ctx.drawImage image 0 0)
     (ctx.fillText "Pattern construction" 20 50))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c)
        (nightjar-family-tree c replicate egg ancestors eggs)))
     (image-button
      "Mutate test" 150 720 "jumpy" (find-image "button.png")
      (lambda (c)
        (nightjar-test c replicate egg ancestors eggs image genome
                       (build-list
                        28
                        (lambda (i)
                          (egg-drawable (egg-mutate genome (calc-mutation-rate)) #f))
                        ))))
     )
    c)))


(define (nightjar-test c replicate egg ancestors eggs image genome vars)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 20pt 'Press Start 2P'")
     (wrap-text ctx "This screen shows the range of mutations possible for this egg." 0 100 1000 1000)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (index-for-each
      (lambda (i egg)
        (ctx.drawImage egg
                       (+ 250 (* 100 (modulo i 7)))
                       (+ 150 (* 130 (Math.floor (/ i 7))))))
      vars)
     ;;(draw-egg-family-tree ctx ancestors eggs)
     (ctx.fillText "Mutation test" 20 50))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c)
        (nightjar-egg-view c replicate egg ancestors eggs image genome)))
     )
    c)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(set! ctx.font "normal 50pt 'Press Start 2P'")

(load-sounds!
 (list
  "great-1.wav"
  "great-2.wav"
  "great-3.wav"
  "good-1.wav"
  "good-2.wav"
  "good-3.wav"
  "ok-1.wav"
  "ok-2.wav"
  "ok-3.wav"
  "fail.wav"))

(load-images!
 (append
  (list
   "button.png"
   "bigbutton-1.png"
   "bigbutton-2.png"
   "play-button.png"
   "mute-on.png"
   "mute-off.png"
   "egg.png"
   "cf.png"
   "cp.png"
   "mv.png"
   "eggs.jpg"
   "bubble.png"
   "bubble2.png"
   "bubble4.png"
   "ren.png"
   "ren-eye1.png"
   "ren-eye2.png"
   "ren-eye3.png"
   "ren-leg1.png"
   "ren-leg2.png"
   "yes.png"
   "no.png"
   "bbsrc.png"
   "cu.png"
   "exeter.png"
   "cuckoos.png"
   "foam.png"
   "sensory-ecology.png"
   "browser-check.png"
   "facebook.png"
   "twitter.png"
   )
  egg-images)
 (lambda ()
   (start-game canvas ctx)))

(define bg_images
  (list
   "bg-a.jpg"
   "bg-b.jpg"
   "bg-c.jpg"
   "bg-d.jpg"
   "bg-e.jpg"
   "bg-f.jpg"
   "bg-g.jpg"
   "bg-h.jpg"
   "bg-i.jpg"
   "bg-j.jpg"
   "bg-k.jpg"
   "bg-l.jpg"
   "bg-m.jpg"
   "bg-n.jpg"
   "bg-o.jpg"
   "bg-p.jpg"
   "bg-q.jpg"
   "bg-r.jpg"
   "bg-s.jpg"
   "bg-t.jpg"
   "bg-u.jpg"
   "bg-v.jpg"
   "bg-w.jpg"
   "bg-x.jpg"
   "bg-y.jpg"
   "bg-z.jpg"
   ))
